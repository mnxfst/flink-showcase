
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<!-- maven specifc artifact grouping and versioning information -->
	<groupId>com.ottogroup.bi.streaming.showcase</groupId>
	<artifactId>log-producer</artifactId>
	<version>0.0.1</version>
	<packaging>jar</packaging>

	<!-- general project information, eg. name and description -->
	<name>log-producer</name>
	<description>Log Producer Example</description>
	<url>http://www.ottogroup.com</url>
	<inceptionYear>2016</inceptionYear>

	<!-- owner -->
	<organization>
  		<name>Otto GmbH &amp; Co KG</name>
  		<url>http://www.ottogroup.com</url>
  	</organization>
  	
  	<!-- involved developers and contributors -->
	<developers>
  		<developer>
  		 	<id>mnxfst</id>
  		 	<name>Christian Kreutzfeldt</name>
  			<email>christian.kreutzfeldt@ottogroup.com</email>
  			<url>https://de.linkedin.com/in/christian-kreutzfeldt-8abb302</url>
  			<organization>Otto GmbH &amp; Co KG</organization>
  			<organizationUrl>http://www.ottogroup.com</organizationUrl>
  			<roles>
  				<role>Architect</role>
  				<role>Developer</role>
  			</roles>
  			<timezone>Europe/Berlin</timezone>
  		</developer>
  	</developers>
	
	<licenses>
		<license>
	    	<name>Apache License, Version 2.0</name>
	    	<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    	<distribution>repo</distribution>
	  	</license>
	</licenses>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<compiler.version>1.8</compiler.version>
		<flink-version>1.0.3</flink-version>
		<scala-version>_2.11</scala-version>
	</properties>
	
	<repositories>
		<repository>
        	<id>otto-bintray</id>
			<url>https://dl.bintray.com/ottogroup/maven</url>
		</repository>
	</repositories>
	
	<dependencies>	

		<!-- hamcrest matchers - must be located up here to avoid any classpath clashes -->
		<dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
        </dependency>
	
		<!-- test related dependencies -->		
		<dependency>
		
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
			<exclusions> 
				<exclusion>
			        <groupId>org.hamcrest</groupId>
			        <artifactId>hamcrest-core</artifactId>
        		</exclusion>
				<exclusion>
			        <groupId>org.hamcrest</groupId>
			        <artifactId>hamcrest-all</artifactId>
        		</exclusion>
			</exclusions>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
			        <groupId>org.hamcrest</groupId>
			        <artifactId>hamcrest-core</artifactId>
        		</exclusion>
				<exclusion>
			        <groupId>org.hamcrest</groupId>
			        <artifactId>hamcrest-all</artifactId>
        		</exclusion>
			</exclusions>
		</dependency>		
		
		<dependency>
		 	<groupId>org.apache.flink</groupId>
		  	<artifactId>flink-test-utils${scala-version}</artifactId>
		  	<version>${flink-version}</version>
		  	<scope>test</scope>
		</dependency>

		<!-- we need the test-jar here as it includes the implementation of a test base class referenced from a junit test runs -->
		<dependency>
			<groupId>org.apache.flink</groupId>
		  	<artifactId>flink-streaming-java${scala-version}</artifactId>
		  	<version>${flink-version}</version>
		  	<exclusions>
		  		<exclusion>
		  			<groupId>commons-cli</groupId>
		  			<artifactId>commons-cli</artifactId>
		  		</exclusion>
		  	</exclusions>
		  	<type>test-jar</type>
		  	<scope>test</scope>
		</dependency>
		
		<!-- end: test related dependencies -->

		<dependency>
			<groupId>org.schwering</groupId>
			<artifactId>irclib</artifactId>
			<version>1.10</version>
		</dependency>


		<!-- apache flink related libraries along with configurable flink & scala version -->
		
		<dependency>
			<groupId>com.ottogroup.bi.streaming</groupId>
			<artifactId>flink-operator-library</artifactId>
			<version>0.3.11${scala-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.flinkspector</groupId>
			<artifactId>flinkspector-core${scala-version}</artifactId>
			<version>0.3</version>
			<exclusions>
				<exclusion><groupId>org.apache.flink</groupId><artifactId>*</artifactId></exclusion>
			</exclusions>
		</dependency>
				
		<dependency>
			<groupId>org.flinkspector</groupId>
			<artifactId>flinkspector-datastream${scala-version}</artifactId>
			<version>0.3</version>
			<exclusions>
				<exclusion><groupId>org.apache.flink</groupId><artifactId>*</artifactId></exclusion>
			</exclusions>
		</dependency>		
		
		<dependency>
		 	<groupId>org.apache.flink</groupId>
		  	<artifactId>flink-streaming-java${scala-version}</artifactId>
		  	<version>${flink-version}</version>
		  	<exclusions>
		  		<exclusion>
		  			<groupId>commons-cli</groupId>
		  			<artifactId>commons-cli</artifactId>
		  		</exclusion>
		  	</exclusions>
		</dependency>
		
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-connector-kafka-0.9${scala-version}</artifactId>
			<version>${flink-version}</version>
		  	<exclusions>
		  		<exclusion>
		  			<groupId>commons-cli</groupId>
		  			<artifactId>commons-cli</artifactId>
		  		</exclusion>
		  	</exclusions>
		</dependency>
		<!-- end: apache flink specific libraries -->
				
		<!-- utilities like commons or guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>19.0</version>
		</dependency>
	
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- end: utilities -->

		<!-- validation related libraries used by stream application core to validate configuration files -->
		<dependency>
		   <groupId>org.hibernate</groupId>
		   <artifactId>hibernate-validator</artifactId>
		   <version>5.2.4.Final</version>
		</dependency>
		<dependency>
		   <groupId>javax.el</groupId>
		   <artifactId>javax.el-api</artifactId>
		   <version>2.2.4</version>
		</dependency>
		<dependency>
		   <groupId>org.glassfish.web</groupId>
		   <artifactId>javax.el</artifactId>
		   <version>2.2.4</version>
		</dependency>		
		<!-- end: validation related libraries -->

		<!-- data sink libraries which are not included in apache flink distribution, eg. elasticsearch or statsd -->
		<dependency>
    		<groupId>org.elasticsearch</groupId>
    		<artifactId>elasticsearch</artifactId>
    		<version>2.3.4</version>
		  	<exclusions>
		  		<exclusion>
		  			<groupId>commons-cli</groupId>
		  			<artifactId>commons-cli</artifactId>
		  		</exclusion>
		  	</exclusions>
		</dependency>

		<dependency>
    		<groupId>com.timgroup</groupId>
    		<artifactId>java-statsd-client</artifactId>
    		<version>3.0.1</version>
		</dependency>
		<!-- end: data sink libraries -->
	</dependencies>

	<build>
		<plugins>
			<!-- We use the maven-shade plugin to create a fat jar that contains all dependencies
			except flink and it's transitive dependencies. The resulting fat-jar can be executed
			on a cluster. Change the value of Program-Class if your program entry point changes. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<!-- Run shade goal on package phase -->
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<excludes>
									<!-- This list contains all dependencies of flink-dist
									Everything else will be packaged into the fat-jar
									-->
									<exclude>org.apache.flink:flink-annotations</exclude>
									<exclude>org.apache.flink:flink-shaded-*</exclude>
									<exclude>org.apache.flink:flink-core</exclude>
									<exclude>org.apache.flink:flink-java</exclude>
									<exclude>org.apache.flink:flink-scala_2.10</exclude>
									<exclude>org.apache.flink:flink-runtime_2.10</exclude>
									<exclude>org.apache.flink:flink-optimizer_2.10</exclude>
									<exclude>org.apache.flink:flink-clients_2.10</exclude>
									<exclude>org.apache.flink:flink-avro_2.10</exclude>
									<exclude>org.apache.flink:flink-examples-batch_2.10</exclude>
									<exclude>org.apache.flink:flink-examples-streaming_2.10</exclude>
									<exclude>org.apache.flink:flink-streaming-java_2.10</exclude>
									
									<!-- Also exclude very big transitive dependencies of Flink

									WARNING: You have to remove these excludes if your code relies on other
									versions of these dependencies.

									-->
									<exclude>org.scala-lang:scala-library</exclude>
									<exclude>org.scala-lang:scala-compiler</exclude>
									<exclude>org.scala-lang:scala-reflect</exclude>
									<exclude>com.amazonaws:aws-java-sdk</exclude>
									<exclude>com.typesafe.akka:akka-actor_*</exclude>
									<exclude>com.typesafe.akka:akka-remote_*</exclude>
									<exclude>com.typesafe.akka:akka-slf4j_*</exclude>
									<exclude>io.netty:netty-all</exclude>
									<exclude>io.netty:netty</exclude>
									<exclude>commons-fileupload:commons-fileupload</exclude>
									<exclude>org.apache.avro:avro</exclude>
									<exclude>commons-collections:commons-collections</exclude>
									<exclude>org.codehaus.jackson:jackson-core-asl</exclude>
									<exclude>org.codehaus.jackson:jackson-mapper-asl</exclude>
									<exclude>com.thoughtworks.paranamer:paranamer</exclude>
									<exclude>org.xerial.snappy:snappy-java</exclude>
									<exclude>org.apache.commons:commons-compress</exclude>
									<exclude>org.tukaani:xz</exclude>
									<exclude>com.esotericsoftware.kryo:kryo</exclude>
									<exclude>com.esotericsoftware.minlog:minlog</exclude>
									<exclude>org.objenesis:objenesis</exclude>
									<exclude>com.twitter:chill_*</exclude>
									<exclude>com.twitter:chill-java</exclude>
									<exclude>com.twitter:chill-avro_*</exclude>
									<exclude>com.twitter:chill-bijection_*</exclude>
									<exclude>com.twitter:bijection-core_*</exclude>
									<exclude>com.twitter:bijection-avro_*</exclude>
									<exclude>commons-lang:commons-lang</exclude>
									<exclude>junit:junit</exclude>
									<exclude>de.javakaffee:kryo-serializers</exclude>
									<exclude>joda-time:joda-time</exclude>
									<exclude>org.apache.commons:commons-lang3</exclude>
									<exclude>org.slf4j:slf4j-api</exclude>
									<exclude>org.slf4j:slf4j-log4j12</exclude>
									<exclude>log4j:log4j</exclude>
									<exclude>org.apache.commons:commons-math</exclude>
									<exclude>org.apache.sling:org.apache.sling.commons.json</exclude>
									<exclude>commons-logging:commons-logging</exclude>
									<exclude>commons-codec:commons-codec</exclude>
									<exclude>com.fasterxml.jackson.core:jackson-core</exclude>
									<exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
									<exclude>com.fasterxml.jackson.core:jackson-annotations</exclude>
									<exclude>stax:stax-api</exclude>
									<exclude>com.typesafe:config</exclude>
									<exclude>org.uncommons.maths:uncommons-maths</exclude>
									<exclude>com.github.scopt:scopt_*</exclude>
									<exclude>commons-io:commons-io</exclude>
									<exclude>commons-cli:commons-cli</exclude>
								</excludes>
							</artifactSet>
							<filters>
								<filter>
									<artifact>org.apache.flink:*</artifact>
									<excludes>
										<exclude>org/apache/flink/shaded/**</exclude>
										<exclude>web-docs/**</exclude>
									</excludes>
								</filter>
							</filters>
							<transformers>
								<!-- add Main-Class to manifest file -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.ottogroup.bi.streaming.showcase.WikiLogProducer</mainClass>
								</transformer>
							</transformers>
							<createDependencyReducedPom>false</createDependencyReducedPom>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Configure the jar plugin to add the main class as a manifest entry -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<archive>
						<manifestEntries>
							<Main-Class>com.ottogroup.bi.streaming.showcase.WikiLogProducer</Main-Class>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>${compiler.version}</source>
					<target>${compiler.version}</target>
					<compilerId>jdt</compilerId>					
				</configuration>
				<dependencies>
        		<!-- This dependency provides the implementation of compiler "jdt": -->
        			<dependency>
            			<groupId>org.eclipse.tycho</groupId>
            			<artifactId>tycho-compiler-jdt</artifactId>
            			<version>0.21.0</version>
        			</dependency>
    </dependencies>
			</plugin>
		</plugins>
		
	</build>
</project>